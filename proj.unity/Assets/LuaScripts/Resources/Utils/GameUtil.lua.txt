local GameUtil = {}

function GameUtil.GetLuaComponentBySuperName (go, superLuaTableName)
	local behaviours = go:GetComponents(typeof(CS.LuaBehaviour))
	local behaviour = nil
	for i = 0, behaviours.Length - 1 do
		behaviour = behaviours[i]
		if string.contains(behaviour.luaScript.name, superLuaTableName) then
			return behaviour
		end
		local super
		if behaviour.returnScriptEnv ~= nil then
			super = behaviour.returnScriptEnv._class_type.super
		end
		if super ~= nil and string.contains(super.__cname, superLuaTableName) then
			return behaviour
		end
	end
	return nil
end

function GameUtil.DepthClone(object)
	local lookup_table = {}
	local function _copy(object)
		if type(object) ~= "table" then
			return object
		elseif lookup_table[object] then
			return lookup_table[object]
		end
		local new_table = {}
		lookup_table[object] = new_table
		for key, value in pairs(object) do
			new_table[_copy(key)] = _copy(value)
		end
		return setmetatable(new_table, getmetatable(object))
	end
	return _copy(object)
end

return GameUtil